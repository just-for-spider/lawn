# coding=utf-8
import sys, os
sys.path.append(os.path.abspath("../../"))
import urllib3.contrib.pyopenssl
urllib3.contrib.pyopenssl.inject_into_urllib3()
import logging
import time
from scrapy.http import Request, FormRequest
from QbSpider.scrapy_redis.spiders import Spiders
from QbSpider.utils.utils import Util
from scrapy import signals
import StringIO
from QbSpider.utils.RedisUtil import RedisConfUtil as rcu
from scrapy.exceptions import DontCloseSpider
import json, re
import base64
import copy
import uuid
from QbSpider.utils.hbclient import HbUnicom
# from QbSpider.utils.utils import get_catch
# from twisted.internet.error import TimeoutError
import logging
logger = logging.getLogger(__name__)
# import sys
# reload(sys)
# sys.setdefaultencoding('utf8')
price_re = "[0-9]\\d*\\.?\\d*"


class UnicomSpider(Spiders):
    name = "xxxxunicom"

    redis_key = "QUEUE_YYS_LT"

    allowed_domains = []

    start_urlss = ["https://uac.10010.com/portal/mallLogin.jsp?redirectURL=http://www.10010.com"]

    custom_settings = {
        "COOKIES_ENABLED": True,
        "REDIRECT_ENABLED": False,
        "REFERER_ENABLED": True,
        "USEPROXYHIGHLEVEL": False,
        "USELOCALIP": 1
    }

    @classmethod
    def from_crawler(cls, crawler, *args, **kwargs):
        spider = super(UnicomSpider, cls).from_crawler(crawler,
                                                       *args, **kwargs)
        crawler.signals.connect(spider.spider_closed, signals.spider_closed)
        return spider

    def __init__(self, *a, **kw):
        super(UnicomSpider, self).__init__(*a, **kw)
        self.utils = Util()
        self.con = rcu().get_redis()
        self.con.ping()

        #modify by wangquanjun 20170313


        self.code_url = "https://uac.10010.com/portal/Service/CreateImage?t=%s"
        self.login_url = 'https://uac.10010.com/portal/Service/MallLogin?callback=jQuery_%s&req_time=%s&redirectURL=http://www.10010.com&userName=%s&password=%s&pwdType=01&productType=01&redirectType=01&rememberMe=1&_=%s'
        self.login_code_url = "https://uac.10010.com/portal/Service/MallLogin?callback=jQuery_%s&req_time=%s&redirectURL=http://www.10010.com&userName=%s&password=%s&pwdType=01&productType=01&verifyCode=%s&uvc=%s&redirectType=01&rememberMe=1&_=%s"
        self.login_random_url = "https://uac.10010.com/portal/Service/MallLogin?callback=jQuery_%s&req_time=%s&redirectURL=http://iservice.10010.com&userName=%s&password=%s&pwdType=02&productType=01&redirectType=01&rememberMe=1&_=%s"
        self.send_random_url = "https://uac.10010.com/portal/Service/SendMSG?callback=jQuery_%s&req_time=%s&mobile=%s&_=%s"
        self.authcode_url = "https://uac.10010.com/portal/Service/CheckNeedVerify?callback=jQuery_%s&userName=%s&pwdType=01&_=%s"
        self.check_authcode = "https://uac.10010.com/portal/Service/CtaIdyChk?callback=jQuery_%s&verifyCode=%s&verifyType=1&_=%s"
        self.record_url = "http://iservice.10010.com/e3/static/query/callDetail?_=%s&accessURL=http://iservice.10010.com/e4/query/bill/call_dan-iframe.html?menuCode=000100030001&menuid=000100030001"
        self.logouturl_post = "http://www.10010.com/mall-web/Index/logout"
        self.ti = 0
        self.tb = HbUnicom()

    def parse(self, response):

        self.username = response.meta["metass"].get("phone", "")

        logger.info(msg=u"账号<%s>,成功获取登录页面"%self.username)

        self.item = {}

        self.record_list = []

        self.passwd = response.meta["metass"].get("pwd","")

        self.username = response.meta["metass"].get("phone","")

        self.phone = self.username

        self.jobid = response.meta["metass"].get("key","")

        self.vercode = response.meta["metass"].get("sms","")

        self.spidertype = ""

        ti = int(time.time() * 1000)

        check_url = self.authcode_url % (ti, self.username, ti)

        self.metas = response.meta["metass"]

        yield Request(url=check_url, callback=self.check, dont_filter=True)

    def check(self, response):

        logger.info(msg="账号<%s>,正在检查当前账户是否需要验证码" % self.username)

        ti = int(time.time() * 1000)

        try:

            j_read = Util().obtain_json(response.body)

        except Exception, e:

            self.ti = 0

            self.metas["code"] = 1999

            self.con.hmset(self.jobid, dict(self.metas))

            logging.error(msg="Error <%s>, Content<%s>" % (e.message, response.body))

            return

        if j_read.get(u'resultCode', None) == u'false':

            logger.info(msg="账号<%s>,当前账户无需验证码" % self.username)

            login_url = self.login_url % (ti, ti, self.username, self.passwd, ti)

            yield Request(url=login_url, callback=self.parse_login, dont_filter=True)

        else:

            logger.info(msg="账号<%s>,当前账户需要验证码" % self.username)

            authcode_url = self.code_url % ti

            yield Request(url=authcode_url, callback=self.parsecode, dont_filter=True, cookies=self.sess)

    #@get_catch
    def parsecode(self, response):

        logger.info(msg="账号<%s>,正在获取验证码" % self.username)

        imgBuf = StringIO.StringIO(response.body)

        params = {
            'user': 'qianbaoocr',
            'pass': 'haodaibao@123',
            'softid': '402f5b2a3709ded763bf48819cae6c51',
            'codetype': '1004',
            'file_base64': base64.b64encode(imgBuf.getvalue()),
            'str_debug': '4',
        }

        headers = {
            'Connection': 'Keep-Alive',
            'User-Agent': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)',
        }

        code_url = "http://upload.chaojiying.net/Upload/Processing.php"

        yield FormRequest(url=code_url, formdata=params, headers=headers, callback=self.get_codes, dont_filter=True,
                          meta={'dont_merge_cookies': True}, cookies={})

    def get_codes(self, response):

        logger.info(msg="账号<%s>,正在获取验证码" % self.username)

        self.sess = {}

        cookie = [i.split(";")[0] for i in response.headers.getlist('Set-Cookie')]

        for cook in cookie:
            self.sess.update({cook[:cook.index("=")]: cook[cook.index("=") + 1:]})

        ti = int(time.time() * 1000)

        re_str = json.loads(response.body)

        if 'OK' not in re_str['err_str']:

            self.ti = 0

            logger.warning(msg="账号<%s>,验证码服务器出现问题或者本地服务器出现问题,服务器错误码<%s>,Redis错误码<%s>" % (self.username,re_str['err_str'],1019))

            self.metas["code"] = 1019

            self.con.hmset(self.jobid, dict(self.metas))

            return

        else:

            key = [i for i in re_str.keys() if u'pic_s' in i]

            self.authcode = re_str[key[0]]

            if self.authcode == "" or self.authcode is None:

                logger.info(msg="账号<%s>,获取验证码内容为空,即将再次获取" % self.username)

                authcode_url = self.code_url % ti

                yield Request(url=authcode_url, callback=self.parsecode, dont_filter=True, cookies=self.sess)

            else:

                logger.info(msg="账号<%s>,成功获取验证码" % self.username)

                check_authcode_url = self.check_authcode % (ti, self.authcode, ti)

                yield Request(url=check_authcode_url, callback=self.check_code, cookies=self.sess, dont_filter=True)

    #@get_catch
    def check_code(self, response):

        logger.info(msg="账号<%s>,检查验证码是否正确" % self.username)

        ti = int(time.time() * 1000)

        j_read = Util().obtain_json(response.body)

        if j_read.get(u'resultCode', None) == u'true':

            logger.info(msg="账号<%s>,当前验证码校验成功" % self.username)

            login_code_url = self.login_code_url % (
            ti, ti, self.username, self.passwd, self.authcode, self.sess.get('uacverifykey', ""), ti)

            yield Request(url=login_code_url, callback=self.parse_login, dont_filter=True)

        else:

            logger.info(msg="账号<%s>,当前验证码校验失败" % self.username)

            authcode_url = self.code_url % ti

            yield Request(url=authcode_url, callback=self.parsecode, dont_filter=True, cookies=self.sess)

    def parse_login(self, response):

        logger.info(msg="账号<%s>,分析登录页面" % self.username)

        res_headers = response.headers.getlist('Set-Cookie')

        self.sess = {}

        cookie = [i.split(";")[0] for i in res_headers]

        for cook in cookie:
            self.sess.update({cook[:cook.index("=")]: cook[cook.index("=") + 1:].replace('"', "")})

        ti = int(time.time() * 1000)

        reg = re.findall(re.compile(r'resultCode:\"([\S]+?)\"', re.I), response.body)

        if reg == []:

            self.ti = 0

            self.metas["code"] = 1999

            self.con.hmset(self.jobid, dict(self.metas))

            logging.error("Unicom login content is Null")

            logger.info(msg="账号<%s>,当前账户登陆失败,Redis错误码<%s>" % (self.username,1999))

            return

        if reg[0] == '0000':
            
            self.ti = 1

            logger.info(msg="账号<%s>,当前账户登陆成功" % self.username)

            self.metas["code"] = 1009

            self.con.hmset(self.jobid, dict(self.metas))

            login_info = "https://uac.10010.com/portal/query/accessLogs?callback=getLoginInfo&_=%s" % ti

            yield Request(url=login_info, callback=self.parse_logininfo, dont_filter=True)

        elif reg[0] == '7007':

            self.ti = 0

            logger.info(msg="账号<%s>,当前账户用户名或者密码错误" % self.username)

            self.metas["code"] = 1004

            self.con.hmset(self.jobid, dict(self.metas))

            return

        elif reg[0] == '7004' or reg[0] == '7072':

            self.ti = 0

            logger.info(msg="账号<%s>,当前账户用户登陆达到最大次数,今日限制登陆" % self.username)

            self.metas["code"] = 1022

            self.con.hmset(self.jobid, dict(self.metas))

            return

        else:

            self.ti = 0

            logger.info(msg="账号<%s>,当前账户登陆失败" % self.username)

            self.metas["code"] = 1999

            self.con.hmset(self.jobid, dict(self.metas))

            return

    #@get_catch
    def parse_logininfo(self, response):

        logger.info(msg="账号<%s>,正在获取当前账户登陆信息" % self.username)

        ti = int(time.time() * 1000)

        try:

            j_read = Util().obtain_json(response.body)

        except Exception, e:

            self.ti = 0
            
            self.metas["code"] = 1999

            self.con.hmset(self.jobid, dict(self.metas))

            logging.error(msg="Error <%s>, Content<%s>" % (e.message, response.body))

            return

        login_records = {"login_recently_record":[]}

        for hit in j_read["content"]["hits"]["hits"]:

            item = {}

            item["login_nos"] = hit["_source"]["os"]

            item["login_time"] = hit["_source"]["login_time"]

            item["login_location"] = hit["_source"]["login_location"]

            item["login_type"] = hit["_source"]["login_from"]

            item["login_brower_type"] = hit["_source"]["brower"]

            item["login_userid"] = hit["_source"]["user_id"]

            item["login_ip"] = hit["_source"]["login_ip"]

            login_records["login_recently_record"].append(item)

        self.tb = HbUnicom()

        self.tb.insert_record_login(phone=self.phone, jobid=self.metas["token"], url=response.url)
        logging.info('inser keys success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json=login_records)
        logging.info('inser page success')
            

        url = "http://iservice.10010.com/e3/static/check/checklogin/?_=%s" % ti

        yield Request(url=url, callback=self.parse_records, method="POST", dont_filter=True)

    #@get_catch
    def parse_records(self, response):

        logger.info(msg="账号<%s>,正在获取当前账户登陆记录" % self.username)

        ti = int(time.time() * 1000)

        j_read = json.loads(response.body.decode("utf8"))

        item = {}

        info = j_read["userInfo"]

        item["card_num"] = info["certnum"]

        if len(item["card_num"]) != 0:

            item["name_authentication"] = False

        else:

            item["name_authentication"] = True

        item["name"] = ""

        item["tel"] = ""

        item["passwd"] = self.passwd

        item["net_in_time"] = ""

        item["sex"] = ""

        item["card_addr"] = ""

        item["operator_type"] = u"联通"

        item["age"] = ""

        item["province"] = ""

        item["city"] = ""

        item["area"] = ""

        self.tb = HbUnicom()
        self.tb.insert_person_info(phone=self.phone, jobid=self.metas["token"], url=response.url)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8', struct_json={"personal_info":[item]})
        logging.info('inser success')

        detail_userinfo_url = "http://iservice.10010.com/e3/static/query/searchPerInfoDetail/?_=%s" % ti

        yield Request(method="POST", url=detail_userinfo_url, callback=self.parse_detail_userinfo, meta={"item": item},
                      dont_filter=True)

    #@get_catch
    def parse_detail_userinfo(self, response):

        logger.info(msg="账号<%s>,正在获取当前账户个人基本信息" % self.username)

        ti = int(time.time() * 1000)

        item = response.meta["item"]

        j_read = json.loads(response.body.decode("utf8"))

        info = j_read["result"].get("MyDetail", "")

        item["passwd"] = self.passwd

        if info:

            #item["spidertime"] = time.strftime('%Y%m%d%H%M%S', time.localtime(time.time()))

            item["name"] = info["custname"]

            item["tel"] = info["usernumber"]

            item["net_in_time"] = info["opendate"]

            item["sex"] = info.get("custsex","")

            item["card_addr"] = info["certaddr"]

            item["operator_type"] = u"联通"

        item["age"] = ""

        item["province"] = ""

        item["city"] = ""

        item["area"] = ""

        self.tb = HbUnicom()
        self.tb.insert_person_info(phone=self.phone, jobid=self.metas["token"], url=response.url)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8', struct_json={"personal_info":[item]})
        logging.info('inser success')

        e4_url = "http://iservice.10010.com/e4/index_server.html"

        yield Request(url=e4_url, callback=self.parse_e4, dont_filter=True)

    #@get_catch
    def parse_e4(self, response):

        ti = int(time.time() * 1000)

        first_bill_url = "http://iservice.10010.com/e3/static/query/currentFee?_=%s&accessURL=http://iservice.10010.com/e4/skip.html" % ti

        yield Request(url=first_bill_url, method="POST", callback=self.parse_realtimebill, dont_filter=True)

    #@get_catch
    def parse_realtimebill(self, response):

        logger.info(msg="账号<%s>,正在获取当前实时账单" % self.username)

        ti = int(time.time() * 1000)

        j_read = json.loads(response.body)

        communication_traffic = {"communication_traffic":[]}

        communication_traffic["communication_traffic"].append({"package_usage_details":""})

        self.tb = HbUnicom()
        self.tb.insert_commu_amount(phone=self.phone, jobid=self.metas["token"], url=response.url)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json=communication_traffic)
        logging.info('inser success')

        account_details = {"account_details":[]}

        account_details["account_details"].append({"ordinary_accounts_details":""})

        self.tb = HbUnicom()
        self.tb.insert_account_detail(phone=self.phone, jobid=self.metas["token"], url=response.url)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json=account_details)
        logging.info('inser success')

        integral_remainder = {"integral_remainder":[]}

        integral_remainder["integral_remainder"].append({"integral_formula":""})

        self.tb = HbUnicom()
        self.tb.insert_remain_score(phone=self.phone, jobid=self.metas["token"], url=response.url)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json=integral_remainder)
        logging.info('inser success')

        expense_detail ={}

        bill_inquiry = {}

        bill_inquiry["billing_cycle"] = j_read["period"]

        bill_inquiry["star_level"] = j_read["custlvl"]

        bill_inquiry["available_integral"] = ""

        bill_inquiry["internet_access_fee"] = ""

        bill_inquiry["package_fee"] = ""

        bill_inquiry["value_added_service_fee"] = ""

        bill_inquiry["package_SMS_charges"] = ""

        bill_inquiry["foreign_language_fee"] = ""

        bill_inquiry["collection_fee"] = ""

        bill_inquiry["other_expenses"] = ""

        expense_detail["package_name"] = ""

        expense_detail["package_fee_details"] = ""

        e_d = []

        b_i = []

        if j_read.get("rspArgs","") != "" and j_read["rspArgs"].get("result","")!="":

            for fee in j_read["rspArgs"]["result"]:

                if fee.get("title", None) == u"账户可用余额":

                    bill_inquiry["main_account_balance"] = fee.get("fee", "")

                elif fee.get("title", None) == u"实时话费":

                    bill_inquiry["current_consumption"] = fee.get("fee", "")

                    if fee.get("content","") !="":

                        for fees in fee["content"]:

                            expense_detail["package_name"] = fees[0]

                            expense_detail["package_fee_details"] = fees[1]

                            e_d.append(expense_detail)

                            if u"上网流量费" in fees[0]:

                                bill_inquiry["internet_access_fee"] = fees[1]

                            elif u"一体化套餐月套餐费" in fees[0]:

                                bill_inquiry["package_fee"] = fees[1]

                            elif u"增值业务" in fees[0]:

                                bill_inquiry["value_added_service_fee"] = fees[1]

                            elif u"短信" in fees[0] or u"彩信" in fees[0]:

                                bill_inquiry["package_SMS_charges"] = fees[1]

                            elif u"通话" in fees[0] or u"语音" in fees[0]:

                                bill_inquiry["foreign_language_fee"] = fees[1]

                            elif u"代收业务" in fees[0]:

                                bill_inquiry["collection_fee"] = fees[1]

                            elif u"其他费用" in fees[0]:

                                bill_inquiry["other_expenses"] = fees[1]

                            b_i.append(bill_inquiry)
                    # else:
                    #     self.tb.insert_bill_statis(phone=self.phone, jobid=self.metas["token"], url=response.url)
                    #
                    #     self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                    #                         struct_json=bill_inquiry)

        self.tb = HbUnicom()
        self.tb.insert_bill_statis(phone=self.phone, jobid=self.metas["token"], url=response.url)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json={"bill_inquiry":b_i if b_i != [] else [bill_inquiry]})
        logging.info('inser success')

        self.tb.insert_charge_detail(phone=self.phone, jobid=self.metas["token"], url=response.url)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json={"expense_detail": e_d if e_d != [] else [expense_detail]})
        logging.info('inser success')

        self.sess = {}

        cookie = response.request.headers.getlist('Cookie')[0].split(";")

        for cook in cookie:
            self.sess.update({cook[:cook.index("=")]: cook[cook.index("=") + 1:].replace('"', "")})

        account_url = "http://iservice.10010.com/e3/static/query/accountBalance/search?_=%s&accessURL=http://iservice.10010.com/e4/skip.html?menuCode=000100010002&menuCode=000100010002&menuid=000100010013"%ti

        yield FormRequest(url=account_url,method="POST",callback=self.parse_account_info,dont_filter=True,formdata={"type":"onlyAccount"})


        monlist = Util().gethalfyearmonth()

        for mon in monlist:

            for k, v in mon.iteritems():

                for xx in xrange((int(v[8:]) - int(k[8:])) + 1):

                    if xx < 10:

                        begdate = "0" + str(xx)

                    else:

                        begdate = str(xx)

                    pay_load = {

                        "pageNo": "1",
                        "pageSize": "100",
                        "beginDate": k[0:8]+begdate,
                        "endDate": k[0:8]+begdate
                    }

                    data_flow_url = "http://iservice.10010.com/e3/static/query/callFlow?_=%s&accessURL=http://iservice.10010.com/e4/query/basic/call_flow_iframe1.html?menuCode=000100030004&menuid=000100030004" % ti

                    yield FormRequest(url=data_flow_url, method="POST", formdata=pay_load,callback=self.parse_data_flow, dont_filter=True,meta={"dataa":k[0:8]+begdate})

        bill_url = "http://iservice.10010.com/e3/static/query/queryHistoryBill?_=%s&accessURL=http://iservice.10010.com/e4/skip.html?menuCode=000100020001&menuCode=000100020001&menuid=000100020001" % ti

        monlist = Util().getnexthalfyearmonth()

        for mon in monlist:

            for k, v in mon.iteritems():
                pay_load = {
                    "querytype": "0001",
                    "querycode": "0001",
                    "billdate": k.replace("-", "")[0:6],
                    "flag": "1",
                }

                yield FormRequest(url=bill_url, method="POST",formdata=pay_load, callback=self.parse_allbill, dont_filter=True,meta={"dataa":k.replace("-", "")[0:6]})

        for mon in monlist:

            for k, v in mon.iteritems():
                pay_load = {

                    "pageNo": "1",
                    "pageSize": "100",
                    "beginDate": k,
                    "endDate": v
                }

                record_url = self.record_url % ti

                yield FormRequest(url=record_url, method="POST", formdata=pay_load, callback=self.parse_record,
                                  dont_filter=True, meta={"k": k, "v": v})

        for mon in [monlist[1]]:

            for k, v in mon.iteritems():
                pay_load = {

                    "pageNo": "1",
                    "pageSize": "100",
                    "begindate": k.replace("-",""),
                    "enddate": v.replace("-","")
                }

                message_url = "http://iservice.10010.com/e3/static/query/sms?_=%s&accessURL=http://iservice.10010.com/e4/query/calls/call_sms-iframe.html?menuCode=000100030002&menuid=000100030002" % ti

                yield FormRequest(url=message_url, method="POST", formdata=pay_load, callback=self.parse_message,
                                  dont_filter=True, meta={"dataa": pay_load["begindate"]})

        for mon in monlist:

            for k, v in mon.iteritems():
                pay_load = {

                    "pageNo": "1",
                    "pageSize": "100",
                    "beginDate": k,
                    "endDate": v
                }

                event_url = "http://iservice.10010.com/e3/static/query/callValueAdded?_=%s&accessURL=http://iservice.10010.com/e4/query/basic/callValueAdded_iframe.html?menuCode=000100030003&menuid=000100030003" % ti

                yield FormRequest(url=event_url, method="POST", formdata=pay_load, callback=self.parse_event,
                                  dont_filter=True,meta={"dataa":k})
        for mon in monlist:

            for k, v in mon.iteritems():
                pay_load = {

                    "pageNo": "1",
                    "pageSize": "100",
                    "beginDate": k.replace("-",""),
                    "endDate": v.replace("-","")
                }
                add_fee_url = "http://iservice.10010.com/e3/static/query/paymentRecord?_=%s&accessURL=http://iservice.10010.com/e4/query/calls/paid_record-iframe.html?menuCode=000100010003&menuid=000100010003"%ti
                yield FormRequest(url=add_fee_url, method="POST", formdata=pay_load, callback=self.parse_add_fee,
                                  dont_filter=True,meta={"dataa":k.replace("-","")})

    
    def parse_account_info(self,response):

        logger.info(msg="账号<%s>,正在获取当前账户信息" % self.username)

        ti = int(time.time() * 1000)

        j_read = json.loads(response.body)

        account_information = {}

        account_information["account_balance"] = j_read.get("prepayavailable","")

        account_information["old_balance"] = ""

        account_information["current_income"] = ""

        account_information["deducted_expenses"] = ""

        self.tb = HbUnicom()
        self.tb.insert_account_info(phone=self.phone, jobid=self.metas["token"], url=response.url)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json={"account_information":[account_information]})
        logging.info('inser success')

    def parse_add_fee(self,response):

        logger.info(msg="账号<%s>,正在获取当前账户充值信息" % self.username)

        ti = int(time.time() * 1000)

        dataa = response.meta["dataa"]

        j_read = json.loads(response.body)

        r_d = []

        if j_read.get("totalResult","") != "":

            for add_fee in j_read["totalResult"]:

                recharge_details = {}

                recharge_details["recharge_time"] = add_fee.get("paydate","")

                recharge_details["cost_change_type"] = add_fee.get("paychannel","")

                recharge_details["recharge_sum"] = add_fee.get("payfee","")

                r_d.append(recharge_details)

        else:

            recharge_details = {}

            recharge_details["recharge_time"] = ""

            recharge_details["cost_change_type"] =""

            recharge_details["recharge_sum"] = ""

            r_d.append(recharge_details)

        self.tb = HbUnicom()
        self.tb.insert_bill_detail(phone=self.phone, jobid=self.metas["token"], url=response.url, post_data=dataa)

        logging.info('inser success')
        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json={"detailed_query":{"recharge_details":r_d}}, post_data=dataa)
    #@get_catch
    def parse_event(self,response):

        logger.info(msg="账号<%s>,正在获取当前增值业务信息" % self.username)

        ti = int(time.time() * 1000)

        dataa = response.meta["dataa"]

        j_read = json.loads(response.body)

        v_a_s_d = []

        if j_read.get("pageMap", "") != "":

            for evens in j_read["pageMap"]["result"]:

                value_added_service_details = {}

                value_added_service_details["time"] = evens.get("begindate","")+ " " +evens.get("begintime","")

                value_added_service_details["usage_mode"] = evens.get("billingmethod","")

                value_added_service_details["business_name"] = evens.get("businessname","")

                value_added_service_details["service_port"] = evens.get("spcode","")

                value_added_service_details["fee"] = evens.get("totalfee","")

                v_a_s_d.append(value_added_service_details)
        else:

            value_added_service_details = {}

            value_added_service_details["time"] = ""

            value_added_service_details["usage_mode"] = ""

            value_added_service_details["business_name"] = ""

            value_added_service_details["service_port"] = ""

            value_added_service_details["fee"] = ""

            v_a_s_d.append(value_added_service_details)

        self.tb = HbUnicom()
        self.tb.insert_bill_detail(phone=self.phone, jobid=self.metas["token"], url=response.url,post_data=dataa)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json={"detailed_query":{"value_added_service_details":v_a_s_d}},post_data=dataa)
        logging.info('inser success')

    #@get_catch
    def parse_message(self, response):

        logger.info(msg="账号<%s>,正在获取当前短信彩信信息" % self.username)

        ti = int(time.time() * 1000)

        dataa = response.meta["dataa"]

        j_read = json.loads(response.body)

        S_d = []

        if j_read.get("pageMap", "") != "":
            for mess in j_read["pageMap"]["result"]:
                SMS_detailed = {}

                SMS_detailed["SMS_number"] = j_read.get("mmsCount","")

                SMS_detailed["MMS_number"] = ""

                SMS_detailed["free_SMS_number"] = ""

                SMS_detailed["dif_net_communication_number"] = ""

                SMS_detailed["start_time"] = mess.get("smsdate","") +" "+ mess.get("smstime","")

                SMS_detailed["communication_location"] = ""

                SMS_detailed["other_number"] = mess.get("othernum","")

                SMS_detailed["communication_mode"] = ""

                SMS_detailed["communication_type"] = ""

                SMS_detailed["business_name"] = ""

                SMS_detailed["package_discount"] = ""

                SMS_detailed["communication_fee"] = mess.get("fee","")

                S_d.append(SMS_detailed)
        else:

            SMS_detailed = {}

            SMS_detailed["SMS_number"] = ""

            SMS_detailed["MMS_number"] = ""

            SMS_detailed["free_SMS_number"] = ""

            SMS_detailed["dif_net_communication_number"] = ""

            SMS_detailed["start_time"] = ""

            SMS_detailed["communication_location"] = ""

            SMS_detailed["other_number"] = ""

            SMS_detailed["communication_mode"] = ""

            SMS_detailed["communication_type"] = ""

            SMS_detailed["business_name"] = ""

            SMS_detailed["package_discount"] = ""

            SMS_detailed["communication_fee"] = ""

            S_d.append(SMS_detailed)

        self.tb = HbUnicom()
        self.tb.insert_bill_detail(phone=self.phone, jobid=self.metas["token"], url=response.url,post_data=dataa)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json={"detailed_query":{"SMS_detailed":S_d}},post_data=dataa)
        logging.info('inser success')

    #@get_catch
    def parse_data_flow(self, response):

        logger.info(msg="账号<%s>,正在获取当前流量账单信息" % self.username)

        ti = int(time.time() * 1000)

        dataa = response.meta["dataa"]

        j_read = json.loads(response.body)

        i_d = []

        if j_read.get("pagelist","") == "":

            internet_details = {}

            internet_details["total_data_flow"] = ""

            internet_details["free_data_flow"] = ""

            internet_details["charge_data_flow"] = ""

            internet_details["data_flow_cost"] = ""

            internet_details["cmwap_total_flow"] = ""

            internet_details["cmwap_free_flow"] = ""

            internet_details["cmwap_charge_flow"] = ""

            internet_details["CMWAP_expenses"] = ""

            internet_details["CMNET_and_other_total_data_flow"] = ""

            internet_details["CMNET_and_other_free_flow"] = ""

            internet_details["CMNET_and_other_charge_flow"] = ""

            internet_details["CMNET_and_other_expenses"] = ""

            internet_details["start_time"] = ""

            internet_details["communication_location"] = ""

            internet_details["internet_type"] = ""

            internet_details["duration"] = ""

            internet_details["total_flow"] = ""

            internet_details["package_discount"] = ""

            internet_details["communication_fee"] = ""

            i_d.append(internet_details)

        else:

            for page in j_read["pagelist"]:

                internet_details = {}

                internet_details["total_data_flow"] = ""

                internet_details["free_data_flow"] = ""

                internet_details["charge_data_flow"] = ""

                internet_details["data_flow_cost"] = ""

                internet_details["cmwap_total_flow"] = ""

                internet_details["cmwap_free_flow"] = ""

                internet_details["cmwap_charge_flow"] = ""

                internet_details["CMWAP_expenses"] = ""

                internet_details["CMNET_and_other_total_data_flow"] = ""

                internet_details["CMNET_and_other_free_flow"] = ""

                internet_details["CMNET_and_other_charge_flow"] = ""

                internet_details["CMNET_and_other_expenses"] = ""

                internet_details["start_time"] = page.get("begindateformat","") +" "+ page.get("begintimeformat","")

                internet_details["communication_location"] = page.get("homearea","")

                internet_details["internet_type"] = page.get("nettypeformat","")

                internet_details["duration"] = page.get("longhour","")

                internet_details["total_flow"] = page.get("pertotalsm","")

                internet_details["package_discount"] = ""

                internet_details["communication_fee"] = page.get("totalfee","")

                i_d.append(internet_details)
        self.tb = HbUnicom()

        self.tb.insert_bill_detail(phone=self.phone, jobid=self.metas["token"], url=response.url, post_data=dataa)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json={"detailed_query":{"internet_details":i_d}}, post_data=dataa)
        logging.info('inser success')

    #@get_catch
    def parse_allbill(self, response):

        logger.info(msg="账号<%s>,正在获取当前历史账单信息" % self.username)

        ti = int(time.time() * 1000)

        dataa = response.meta["dataa"]

        j_read = json.loads(response.body)

        b_i = []

        bill_inquiry = {}

        bill_inquiry["billing_cycle"] = "" if j_read.get("result","") == "" else j_read["result"]["cycleid"]

        bill_inquiry["star_level"] = "" if j_read.get("userinfo","") == "" else j_read["userinfo"]["custlvl"]

        bill_inquiry["available_integral"] = ""

        bill_inquiry["internet_access_fee"] = ""

        bill_inquiry["package_fee"] = ""

        bill_inquiry["value_added_service_fee"] = ""

        bill_inquiry["package_SMS_charges"] = ""

        bill_inquiry["foreign_language_fee"] = ""

        bill_inquiry["collection_fee"] = ""

        bill_inquiry["other_expenses"] = ""

        bill_inquiry["current_consumption"] = ""

        bill_inquiry["main_account_balance"] = ""

        if j_read.get("result", "") != "":

            for fee in j_read["result"]["billinfo"]:

                if u"套内流量费用" in fee["integrateitem"]:

                    bill_inquiry["internet_access_fee"] = fee.get("fee","")

                elif u"月固定费" in fee["integrateitem"]:

                    bill_inquiry["package_fee"] = fee.get("fee","")

                elif u"增值业务费" in fee["integrateitem"]:

                    bill_inquiry["value_added_service_fee"] = fee.get("fee","")

                elif u"短信" in fee["integrateitem"] or u"彩信" in fee["integrateitem"]:

                    bill_inquiry["package_SMS_charges"] = fee.get("fee","")

                elif u"通话" in fee["integrateitem"] or u"语音" in fee["integrateitem"]:

                    bill_inquiry["foreign_language_fee"] = fee.get("fee","")

                elif u"增值业务-" in fee["integrateitem"]:

                    bill_inquiry["collection_fee"] = fee.get("fee","")

                elif u"其他费用" in fee["integrateitem"]:

                    bill_inquiry["other_expenses"] = fee.get("fee","")

                b_i.append(bill_inquiry)

        self.tb = HbUnicom()
        self.tb.insert_bill_statis(phone=self.phone, jobid=self.metas["token"], url=response.url,post_data=dataa)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json={"bill_inquiry":b_i if b_i != [] else bill_inquiry},post_data=dataa)
        logging.info('inser success')

    #@get_catch
    def parse_record(self, response):

        logger.info(msg="账号<%s>,正在获取当前账户通话详单信息" % self.username)

        k = response.meta["k"]
        print '----------------------', k

        v = response.meta["v"]

        ti = int(time.time() * 1000)

        if response.body:

            j_read = json.loads(response.body.decode("utf8"))

            if isinstance(j_read, dict):

                if j_read.get("errorMessage", "") != "":
                    logging.warning(u"数据采集不完整!系统访问频繁,请明天再试")
                    
                    self.metas["code"] = 1023
                    
                    self.con.hmset(self.jobid, dict(self.metas))

                    return

                counts = int(j_read["totalRecord"])

                pagenos = counts / 100 if counts % 100 == 0 else counts / 100 + 1

                for nos in xrange(1, pagenos + 1):
                    pay_load = {

                        "pageNo": "%s" % nos,
                        "pageSize": "100",
                        "beginDate": k,
                        "endDate": v
                    }

                    record_url = self.record_url % ti

                    print '----------------------', record_url

                    yield FormRequest(url=record_url, formdata=pay_load, callback=self.parse_record_detail,
                                      dont_filter=True,meta={"dataa":k})

            else:

                rest = copy.deepcopy(response.request)

                yield rest


        else:

            rest = copy.deepcopy(response.request)

            yield rest

    #@get_catch
    def parse_record_detail(self, response):

        logger.info(msg="账号<%s>,正在获取当前账户通话详单信息详情页面" % self.username)

        dataa = response.meta["dataa"]

        recordd = []

        if response.body:

            j_read = json.loads(response.body.decode("utf8"))

            if isinstance(j_read, dict):

                if j_read.get("errorMessage", "") != "":

                    logging.warning(u"数据采集不完整!系统访问频繁,请明天再试")
                    
                    self.metas["code"] = 1023
                    
                    self.con.hmset(self.jobid, dict(self.metas))

                    return

                for record in j_read["pageMap"]["result"]:
                    records = {}

                    records["start_time"] = record.get("calldate","")

                    # records["calltime"] = record["calltime"]

                    records["communication_duration"] = record.get("calllonghour","")

                    records["communication_mode"] = record.get("calltypeName","")

                    records["other_number"] = record.get("othernum","")

                    records["home_communication_location"] = record.get("homeareaName","")

                    records["other_communication_location"] = record.get("calledhome","")

                    records["communication_type"] = record.get("landtype","")

                    records["localfee"] = record.get("landfee","")

                    records["toll_call"] = record.get("otherfee","")

                    records["roam_call_free"] = record.get("roamfee","")

                    records["new_call"] = ""

                    records["business_name"] = ""

                    records["package_discount"] = ""

                    records["communication_fee"] = record.get("totalfee","")

                    recordd.append(records)


            else:

                rest = copy.deepcopy(response.request)

                return rest

        else:

            rest = copy.deepcopy(response.request)

            return rest
        self.tb = HbUnicom()

        print '-------', dataa
        self.tb.insert_bill_detail(phone=self.phone, jobid=self.metas["token"], url=response.url, post_data=dataa)
        logging.info('inser success')

        self.tb.insert_page(url=response.url, phone=self.phone, html=response.body, charset='utf-8',
                            struct_json={"detailed_query":{"voice_communication_detailed_list":recordd}}, post_data=dataa)

        logging.info('inser success')

    def spider_closed(self, spider):

        if self.ti == 1:

            self.metas["code"] = 1001

            self.con.hmset(self.jobid, dict(self.metas))

            logging.warning(msg="{%s} spider closed" % spider.name)
        else:
            pass


    def spider_idle(self):

        logger.info(msg="spider_idle")

        if self.ti == 1:

            self.metas["code"] = 1001

            self.con.hmset(self.jobid, dict(self.metas))

            try:

                con = Util().spider_login_out(method="post", url=self.logouturl_post, cookies=self.sess)

                del con

            except Exception,e:

                pass

        self.schedule_next_requests()

        self.ti = 0

        raise DontCloseSpider
